name: CI Pipeline

on:
  push:
  pull_request:

env:
  DOTNET_VERSION: '9.0.x'
  SOLUTION_FILE: 'WebForum.sln'

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Restore dependencies
      run: dotnet restore ${{ env.SOLUTION_FILE }}

    - name: Build solution
      run: dotnet build ${{ env.SOLUTION_FILE }} --configuration Release --no-restore

    - name: Install EF Core tools
      run: dotnet tool install --global dotnet-ef

    - name: Generate migrations if missing
      run: |
        cd src/WebForum.Api
        if [ ! -d "Migrations" ] || [ -z "$(find Migrations -name '*.cs' 2>/dev/null)" ]; then
          echo "No migrations found. Creating initial migration..."
          dotnet ef migrations add InitialCreate
          echo "Initial migration created successfully!"
          
          # Rebuild the solution to include the new migrations
          echo "Rebuilding solution to include new migrations..."
          cd ../../
          dotnet build ${{ env.SOLUTION_FILE }} --configuration Release --no-restore
        else
          echo "Migrations already exist."
        fi

    - name: Run unit tests with coverage
      run: |
        dotnet test tests/WebForum.UnitTests/WebForum.UnitTests.csproj \
          --configuration Release \
          --no-build \
          --verbosity normal \
          --collect:"XPlat Code Coverage" \
          --results-directory ./coverage-results/unit \
          --logger trx \
          --logger "console;verbosity=normal"

    - name: Run integration tests with coverage
      run: |
        dotnet test tests/WebForum.IntegrationTests/WebForum.IntegrationTests.csproj \
          --configuration Release \
          --no-build \
          --verbosity normal \
          --collect:"XPlat Code Coverage" \
          --results-directory ./coverage-results/integration \
          --logger trx \
          --logger "console;verbosity=detailed" \
          -- -parallel none -maxthreads 1

    - name: Install ReportGenerator tool
      run: dotnet tool install -g dotnet-reportgenerator-globaltool

    - name: Generate coverage report
      run: |
        reportgenerator \
          -reports:"coverage-results/**/coverage.cobertura.xml" \
          -targetdir:coverage-report \
          -reporttypes:"Html;Cobertura;JsonSummary;Badges" \
          -verbosity:Warning

    - name: Upload coverage reports to artifacts
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: coverage-report/
        retention-days: 30

    - name: Display coverage summary
      run: |
        echo "## 📊 Code Coverage Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ -f "coverage-report/Summary.json" ]; then
          echo "### Overall Coverage" >> $GITHUB_STEP_SUMMARY
          
          # Extract overall summary with error handling
          LINE_COV=$(cat coverage-report/Summary.json | jq -r '.summary.linecoverage // "N/A"')
          BRANCH_COV=$(cat coverage-report/Summary.json | jq -r '.summary.branchcoverage // "N/A"')
          COVERED_LINES=$(cat coverage-report/Summary.json | jq -r '.summary.coveredlines // "N/A"')
          TOTAL_LINES=$(cat coverage-report/Summary.json | jq -r '.summary.coverablelines // "N/A"')
          TOTAL_CLASSES=$(cat coverage-report/Summary.json | jq -r '.summary.classes // "N/A"')
          
          echo "- **Line Coverage:** ${LINE_COV}%" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch Coverage:** ${BRANCH_COV}%" >> $GITHUB_STEP_SUMMARY  
          echo "- **Covered Lines:** ${COVERED_LINES} / ${TOTAL_LINES}" >> $GITHUB_STEP_SUMMARY
          echo "- **Total Classes:** ${TOTAL_CLASSES}" >> $GITHUB_STEP_SUMMARY
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🎯 Key Services Coverage" >> $GITHUB_STEP_SUMMARY
          echo "| Service | Line Coverage | Branch Coverage |" >> $GITHUB_STEP_SUMMARY
          echo "|---------|---------------|-----------------|" >> $GITHUB_STEP_SUMMARY
          
          # Check if coverage data exists
          HAS_COVERAGE=$(cat coverage-report/Summary.json | jq -r 'has("coverage") and (.coverage.assemblies | length > 0)')
          
          if [ "$HAS_COVERAGE" = "true" ]; then
            # Extract coverage for Tier 1 Security Services
            echo "**Tier 1 - Security Services**" >> $GITHUB_STEP_SUMMARY
            cat coverage-report/Summary.json | jq -r '
              .coverage.assemblies[].classesinassembly[]? | 
              select(.name? and (.name | test("SecurityService|AuthService|SanitizationService"))) |
              "| " + (.name | split(".") | last) + " | " + (.coverage | tostring) + "% | " + ((.branchcoverage // 0) | tostring) + "% |"
            ' >> $GITHUB_STEP_SUMMARY 2>/dev/null || true
            
            # Extract coverage for Tier 2 Business Services
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Tier 2 - Business Services**" >> $GITHUB_STEP_SUMMARY
            cat coverage-report/Summary.json | jq -r '
              .coverage.assemblies[].classesinassembly[]? | 
              select(.name? and (.name | test("PostService|UserService|ModerationService"))) |
              "| " + (.name | split(".") | last) + " | " + (.coverage | tostring) + "% | " + ((.branchcoverage // 0) | tostring) + "% |"
            ' >> $GITHUB_STEP_SUMMARY 2>/dev/null || true
            
            # Extract coverage for Tier 3 Support Services
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Tier 3 - Support Services**" >> $GITHUB_STEP_SUMMARY
            cat coverage-report/Summary.json | jq -r '
              .coverage.assemblies[].classesinassembly[]? | 
              select(.name? and (.name | test("LikeService|CommentService"))) |
              "| " + (.name | split(".") | last) + " | " + (.coverage | tostring) + "% | " + ((.branchcoverage // 0) | tostring) + "% |"
            ' >> $GITHUB_STEP_SUMMARY 2>/dev/null || true
          else
            echo "| No coverage data available | - | - |" >> $GITHUB_STEP_SUMMARY
          fi
        else
          echo "⚠️ Coverage report not found. Please check the test execution." >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "📁 **Detailed Report:** Available in the coverage-report artifact" >> $GITHUB_STEP_SUMMARY
